jobs:
#  - name: test-job
#    type: runSh
#    steps:
#      - IN: vpc_params
#      - IN: aws_creds
#        switch: off
#      - IN: auto_repo
#        switch: off
#      - TASK:
#        - script: . IN/auto_repo/gitRepo/shipUtil.sh
#        - script: . IN/auto_repo/gitRepo/test.sh
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: ls -al

########################### INFRA AUTOMATION JOBS #########################
# job to setup AWS IAM roles, profiles etc.
  - name: setup_aws_net
    type: runSh
    steps:
      - IN: vpc_params
      - IN: aws_creds
        switch: off
      - IN: aws_pem
        switch: off
      - IN: auto_repo
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/provisionAWS.sh awsSetupIAM
      - OUT: vpc_ami_params
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: /build/IN/auto_repo/gitRepo/archiveState.sh awsSetupIAM

# job to create AWS AMI used to deploy VMs
  - name: build_ecs_ami
    type: runSh
    steps:
      - IN: aws_creds
      - IN: auto_repo
        switch: off
      - IN: network_params
        switch: off
      - TASK:
        - script: . IN/auto_repo/gitRepo/shipUtil.sh
        - script: . IN/auto_repo/gitRepo/awsBuildAMI/basePack.sh
      - OUT: ami_params
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"

## job to provision TEST VMs and ECS cluster
#  - name: prov_ecs_test
#    type: runSh
#    steps:
#      - IN: aws_pem
#      - IN: aws_creds
#      - IN: auto_repo
#        switch: off
#      - IN: ami_params
#        switch: off
#      - TASK:
#        - script: IN/auto_repo/gitRepo/provisionAWS.sh awsTestECS
#      - OUT: test_env_ecs
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: /build/IN/auto_repo/gitRepo/archiveProvisionState.sh awsTestECS
#
## job to provision PROD VMs and ECS cluster
#  - name: prov_ecs_prod
#    type: runSh
#    steps:
#      - IN: aws_pem
#      - IN: aws_creds
#      - IN: auto_repo
#        switch: off
#      - IN: ami_params
#        switch: off
#      - TASK:
#        - script: IN/auto_repo/gitRepo/provisionAWS.sh awsProdECS
#      - OUT: prod_env_ecs
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: /build/IN/auto_repo/gitRepo/archiveProvisionState.sh awsProdECS

######################### DOCKER Based WAR CI AUTO JOBS #######################
## package sample WAR into docker container
#  - name: ci_app
#    type: runCLI
#    steps:
#      - IN: docker_creds
#      - IN: demo_doc_repo
#      - TASK:
#        - script: IN/demo_doc_repo/gitRepo/build.sh
#      - OUT: demo_doc_img
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILED"
#
##  manifest that defines the DOCKER WAR service definition
#  - name: create_app_man
#    type: manifest
#    steps:
#      - IN: demo_doc_img
#      - IN: doc_img_opts
##      - IN: def_ver_param
#
### deploy job that deploys native war to TEST ECS Cluster
#  - name: deploy_app_test
#    type: deploy
#    steps:
#      - IN: create_app_man
#      - IN: test_env_ecs
#        switch: off
#      - TASK: managed
#
############################## TEST AUTO JOBS ##############################
## job to run SIT testing
#  - name: sit
#    type: runSh
#    steps:
#      - IN: sit_repo
#      - IN: deploy_app_test
#      - IN: sit_params
#      - TASK:
#        - script: IN/sit_repo/gitRepo/test.sh sit_params
#    on_success:
#      - script: touch /build/state/success.txt
#    on_failure:
#      - script: touch /build/state/failure.txt
#
############################# RELEASE AUTO JOBS #############################
## job to create a production release
#  - name: release_app
#    type: release
#    steps:
#      - IN: seed_app_ver
#      - IN: sit
#        switch: off
#      - TASK: managed
#        bump: patch
#
## job manipulate prod version param
#  - name: set_prod_app_ver
#    type: runSh
#    steps:
#      - IN: auto_repo
#        switch: off
#      - IN: release_app
#      - OUT: prod_app_ver
#      - TASK:
#        - script: IN/auto_repo/gitRepo/setVer.sh release_app prod_app_ver
#
################################# CD AUTO JOBS ################################
## deploy job that deploys native war to PROD ECS Cluster
#  - name: deploy_app_prod
#    type: deploy
#    steps:
#      - IN: scale_app_prod
#      - IN: prod_app_ver
#      - IN: deploy_app_test
#        switch: off
#      - IN: prod_env_ecs
#        switch: off
#      - TASK: managed






######################### NATIVE WAR CI/CD JOBS #########################
## manifest that defines the Native WAR service definition
#  - name: demo_war_manifest
#    type: manifest
#    steps:
#      - IN: demo_war
#      - IN: demo_war_params
#
## deploy job that deploys native war to cluster of VMs
#  - name: demo_war_test_deploy
#    type: deploy
#    steps:
#      - IN: demo_war_manifest
#        force: true
#      - IN: demo_war_test_cls
#      - TASK:
#        - script: sudo rm -rf /opt/tomcat/webapps/HelloWorld.war
#        - script: sudo cp /tmp/shippable/demo_war_manifest/demo_war/HelloWorld.war /opt/tomcat/webapps/HelloWorld.war
#
