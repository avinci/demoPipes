jobs:
#  - name: test-job
#    type: runSh
#    steps:
#      - IN: net_conf
#      - IN: aws_creds
#        switch: off
#      - IN: auto_repo
#        switch: off
#      - TASK:
#        - script: . IN/auto_repo/gitRepo/shipUtil.sh
#        - script: . IN/auto_repo/gitRepo/test.sh
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: ls -al

########################### INFRA AUTOMATION JOBS #########################
# job to setup AWS IAM roles, profiles etc.
  - name: setup_net
    type: runSh
    steps:
      - IN: net_tf_state
      - IN: net_conf
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsSetupIAM/provNetwork.sh create
      - OUT: ami_vpc_conf
      - OUT: test_vpc_conf
      - OUT: prod_vpc_conf
      - OUT: net_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsSetupIAM net_tf_state

# job to create AWS AMI used to deploy VMs
  - name: build_ecs_ami
    type: runSh
    steps:
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - IN: ami_vpc_conf
      - TASK:
        - script: . IN/auto_repo/gitRepo/shipUtil.sh
        - script: . IN/auto_repo/gitRepo/awsBuildAMI/basePack.sh
      - OUT: ami_sec_approved
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"

# job to provision TEST VMs and ECS cluster
  - name: prov_ecs_test
    type: runSh
    steps:
      - IN: test_tf_state
      - IN: create_app_man
      - IN: ami_sec_approved
        switch: off
      - IN: test_vpc_conf
        switch: off
      - IN: aws_pem
        switch: off
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsTestECS/provTestInfra.sh create
      - OUT: test_env_ecs
      - OUT: test_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsTestECS test_tf_state

# job to de-prov TEST VMs and ECS cluster
  - name: de_prov_ecs_test
    type: runSh
    steps:
      - IN: test_tf_state
      - IN: sit
        switch: off
      - IN: test_vpc_conf
        switch: off
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - IN: ami_sec_approved
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsTestECS/provTestInfra.sh destroy
#      - OUT: test_env_ecs
      - OUT: test_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsTestECS test_tf_state

  - name: de_prov_net
    type: runSh
    steps:
      - IN: setup_net
        switch: off
      - IN: net_tf_state
      - IN: net_conf
        switch: off
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsSetupIAM/provNetwork.sh destroy
      - OUT: net_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsSetupIAM net_tf_state


######################### DOCKER Based CI AUTO JOBS #######################
## package sample Node.js into docker container
  - name: ci-push-docker-hub_runCI
    type: runCI
    steps:
      - OUT: demo_doc_img

#  manifest that defines the DOCKER WAR service definition
  - name: create_app_man
    type: manifest
    steps:
      - IN: demo_doc_img
      - IN: doc_img_opts
#      - IN: def_ver_param

## deploy job that deploys native war to TEST ECS Cluster
  - name: deploy_app_test
    type: deploy
    steps:
      - IN: create_app_man
        switch: off
      - IN: test_env_ecs
      - TASK: managed

## job to provision PROD VMs and ECS cluster
  - name: prov_ecs_prod
    type: runSh
    steps:
      - IN: prod_tf_state
      - IN: ami_sec_approved
      - IN: prod_vpc_conf
        switch: off
      - IN: aws_pem
        switch: off
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsProdECS/provProdInfra.sh create
      - OUT: prod_env_ecs
      - OUT: prod_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsProdECS prod_tf_state

############################# TEST AUTO JOBS ##############################
# job to run SIT testing
  - name: sit
    type: runSh
    steps:
      - IN: sit_repo
      - IN: deploy_app_test
      - IN: sit_params
      - TASK:
        - script: IN/sit_repo/gitRepo/test.sh sit_params
    on_success:
      - script: touch /build/state/success.txt
    on_failure:
      - script: touch /build/state/failure.txt

############################ RELEASE AUTO JOBS #############################
# job to create a production release
  - name: release_app
    type: release
    steps:
      - IN: seed_app_ver
      - IN: sit
      - IN: deploy_app_test
        switch: off
      - TASK: managed
        bump: patch

# job manipulate prod version param
  - name: trig_prod_deploy
    type: runSh
    steps:
      - IN: auto_repo
        switch: off
      - IN: release_app
        switch: off
      - OUT: prod_app_ver
      - TASK:
        - script: IN/auto_repo/gitRepo/setVer.sh release_app prod_app_ver

################################ CD AUTO JOBS ################################
# deploy job that deploys native war to PROD ECS Cluster
  - name: deploy_app_prod
    type: deploy
    steps:
      - IN: scale_app_prod
      - IN: trig_prod_deploy
      - IN: release_app
        switch: off
      - IN: prod_env_ecs
      - TASK: managed

# job to de-prov PROD VMs and ECS cluster
  - name: de_prov_ecs_prod
    type: runSh
    steps:
      - IN: prov_ecs_prod
        switch: off
      - IN: prod_tf_state
      - IN: prod_vpc_conf
        switch: off
      - IN: aws_creds
        switch: off
      - IN: auto_repo
        switch: off
      - IN: ami_sec_approved
        switch: off
      - TASK:
        - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh
        - script: . /build/IN/auto_repo/gitRepo/awsProdECS/provProdInfra.sh destroy
#      - OUT: prod_env_ecs
      - OUT: prod_tf_state
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    always:
      - script: . /build/IN/auto_repo/gitRepo/shipUtil.sh && . /build/IN/auto_repo/gitRepo/archiveState.sh awsProdECS prod_tf_state



######################### NATIVE WAR CI/CD JOBS #########################
## manifest that defines the Native WAR service definition
#  - name: demo_war_manifest
#    type: manifest
#    steps:
#      - IN: demo_war
#      - IN: demo_war_params
#
## deploy job that deploys native war to cluster of VMs
#  - name: demo_war_test_deploy
#    type: deploy
#    steps:
#      - IN: demo_war_manifest
#        force: true
#      - IN: demo_war_test_cls
#      - TASK:
#        - script: sudo rm -rf /opt/tomcat/webapps/HelloWorld.war
#        - script: sudo cp /tmp/shippable/demo_war_manifest/demo_war/HelloWorld.war /opt/tomcat/webapps/HelloWorld.war
#
